From 2a43fdbccd44afa71d8771884ce25e416ccf69c4 Mon Sep 17 00:00:00 2001
From: Laine Stump <laine@laine.org>
Date: Fri, 6 Mar 2015 14:17:44 -0500
Subject: [PATCH 08/13] when calling aug_match() escape special characters in components of paths

Part of resolution for:

  https://bugzilla.redhat.com/show_bug.cgi?id=1165966
  (CVE-2014-8119)

As with aug_get(), most of the calls to aug_match() either use paths
that are themselves returned from aug_match() (in which case they are
already escaped), they don't include any unsanitized data outside of
single quotes, or (in one case - aug_fmt_match()) we don't know the
nature of the data, as it is composed of asprintf arguments; in this
final case, we will do a separate patch looking at eash of the callers
to aug_fmt_match().
(cherry picked from commit 841cace8c5a12ee9b44ecf9872f27a2f938a396a)
---
 src/drv_redhat.c |   16 +++++++++++-----
 src/drv_suse.c   |   27 ++++++++++++++++++---------
 2 files changed, 29 insertions(+), 14 deletions(-)

diff --git a/src/drv_redhat.c b/src/drv_redhat.c
index e1ca76f..4935f98 100644
--- a/src/drv_redhat.c
+++ b/src/drv_redhat.c
@@ -197,6 +197,7 @@ static char *find_ifcfg_path_by_device(struct netcf *ncf, const char *name) {
  */
 static char *find_ifcfg_path(struct netcf *ncf, const char *name) {
     augeas *aug = NULL;
+    char *escaped_name = NULL;
     char *path = NULL;
     const char *mac = NULL;
     int r, nmatches;
@@ -204,15 +205,19 @@ static char *find_ifcfg_path(struct netcf *ncf, const char *name) {
     aug = get_augeas(ncf);
     ERR_BAIL(ncf);
 
+    r = aug_escape_name_wrap(ncf, aug, name, &escaped_name);
+    ERR_NOMEM(r < 0, ncf);
+
     /* if ifcfg-NAME exists, use that */
-    r = xasprintf(&path, "%s/ifcfg-%s", network_scripts_path, name);
+    r = xasprintf(&path, "%s/ifcfg-%s", network_scripts_path,
+                  escaped_name ? escaped_name : name);
     ERR_NOMEM(r < 0, ncf);
 
     nmatches = aug_match(aug, path, NULL);
     ERR_COND_BAIL(nmatches < 0, ncf, EOTHER);
 
     if (nmatches == 1)
-        return path;
+        goto cleanup;
 
     FREE(path);
 
@@ -223,16 +228,17 @@ static char *find_ifcfg_path(struct netcf *ncf, const char *name) {
         path = find_ifcfg_path_by_hwaddr(ncf, mac);
         ERR_BAIL(ncf);
         if (path != NULL)
-            return path;
+            goto cleanup;
     }
 
     path = find_ifcfg_path_by_device(ncf, name);
     ERR_BAIL(ncf);
-
+ cleanup:
+    FREE(escaped_name);
     return path;
  error:
     FREE(path);
-    return NULL;
+    goto cleanup;
 }
 
 /* Given NDEVS path to DEVICE entries which may contain duplicate devices,
diff --git a/src/drv_suse.c b/src/drv_suse.c
index 3b1ebd1..cfd9762 100644
--- a/src/drv_suse.c
+++ b/src/drv_suse.c
@@ -142,22 +142,27 @@ static int is_slave(struct netcf *ncf, const char *intf) {
 
 static bool has_ifcfg_file(struct netcf *ncf, const char *name) {
     augeas *aug = NULL;
+    char *escaped_name = NULL;
     char *path = NULL;
     int nmatches = 0, r;
 
     aug = get_augeas(ncf);
     ERR_BAIL(ncf);
 
+    r = aug_escape_name_wrap(aug, name, &escaped_name);
+    ERR_NOMEM(r < 0, ncf);
+
     /* if ifcfg-NAME exists, true */
-    r = xasprintf(&path, "%s/%s/ifcfg-%s", aug_files, network_scripts_path, name);
+    r = xasprintf(&path, "%s/%s/ifcfg-%s", aug_files, network_scripts_path,
+                  escaped_name ? escaped_name : name);
     ERR_NOMEM(r < 0, ncf);
 
     nmatches = aug_match(aug, path, NULL);
     ERR_COND_BAIL(nmatches < 0, ncf, EOTHER);
 
-    FREE(path);
-
 error:
+    FREE(path);
+    FREE(escaped_name);
     return nmatches > 0;
 }
 
@@ -283,26 +288,30 @@ static int find_hwaddr_by_device(struct netcf *ncf, const char *name,
  */
 static char *find_ifcfg_path(struct netcf *ncf, const char *name) {
     augeas *aug = NULL;
+    char *escaped_name = NULL;
     char *path = NULL;
     int r, nmatches;
 
     aug = get_augeas(ncf);
     ERR_BAIL(ncf);
 
+    r = aug_escape_name_wrap(aug, name, &escaped_name);
+    ERR_NOMEM(r < 0, ncf);
+
     /* if ifcfg-NAME exists, use that */
-    r = xasprintf(&path, "%s/%s/ifcfg-%s", aug_files, network_scripts_path, name);
+    r = xasprintf(&path, "%s/%s/ifcfg-%s", aug_files, network_scripts_path,
+                  escaped_name ? escaped_name : name);
     ERR_NOMEM(r < 0, ncf);
 
     nmatches = aug_match(aug, path, NULL);
     ERR_COND_BAIL(nmatches < 0, ncf, EOTHER);
 
-    if (nmatches == 1)
-        return path;
-
+ cleanup:
+    FREE(escaped_name);
+    return path;
  error:
     FREE(path);
-
-    return NULL;
+    goto cleanup;
 }
 
 static int list_interfaces(struct netcf *ncf, char ***intf) {
-- 
1.7.1

