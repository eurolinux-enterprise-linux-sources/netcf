From bdfa299c1090c014af39d46ab1190387af2eab7a Mon Sep 17 00:00:00 2001
From: Laine Stump <laine@laine.org>
Date: Wed, 25 Mar 2015 14:04:46 -0400
Subject: [PATCH 11/13] escape interface name in path generated by xsl transform

Part of resolution for:

  https://bugzilla.redhat.com/show_bug.cgi?id=1165966
  (CVE-2014-8119)

The XML representation understood/used by augeas has a "path" that is
used to locate the interface config in the augeas tree. This path has
been constructed by a XSL transforms in (redhat|suse)-get.xsl, by
doing a simple string concatenation. Although the actual name in the
config *shouldn't* be escaped, its usage in the augeas path should be.

This patch defines an xslt extension to perform the escaping, then
calls it from the xsl transforms for redhat and suse (the debian
config is all in a single file with a fixed name that will never need
escaping).

Due to the RNG restricting interface names to "[a-zA-Z0-9_\.\-:/\|]+"
(see device-name in interface.rng), none of which require escaping for
augeas, so it was necessary to temporarily modify device-name to allow
some extra characters in order to properly test the xslt
extension. With this extension in place, and the RNG grammar properly
loosened, it was possible to define, list, dumpxml, ifup, ifdown, and
undefine a bridge interface named '.|abab'. The only strange
observances were both uncontrollable by netcf:

1) "brctl show" did not show the new bridge named '.|abab', although
   it was visible in the output of "ifconfig" and shown as a bridge
   device by "ip -d link show"

2) after "ncftool ifdown '.|abab'" the bridge was marked as down, but
   /sbin/ifdown failed to delete it. "ip link del '.|abab'" was
   successful, though.

Since the RNG has only been loosened locally for the purposes of this
test, I don't consider this anything to worry about.
(cherry picked from commit 3d961693e98d9b0dc6f649ad598c6c402401c151)
---
 data/xml/redhat-get.xsl |    7 ++++---
 data/xml/suse-get.xsl   |    5 +++--
 src/xslt_ext.c          |   46 +++++++++++++++++++++++++++++++++++++++++++++-
 3 files changed, 52 insertions(+), 6 deletions(-)

diff --git a/data/xml/redhat-get.xsl b/data/xml/redhat-get.xsl
index 923dde0..370f4ca 100644
--- a/data/xml/redhat-get.xsl
+++ b/data/xml/redhat-get.xsl
@@ -1,7 +1,8 @@
 <?xml version="1.0"?>
 <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                 xmlns:ipcalc = "http://redhat.com/xslt/netcf/ipcalc/1.0"
-                extension-element-prefixes="ipcalc"
+                xmlns:pathcomponent = "http://redhat.com/xslt/netcf/pathcomponent/1.0"
+                extension-element-prefixes="ipcalc pathcomponent"
                 version="1.0">
 
   <xsl:import href="util-get.xsl"/>
@@ -45,7 +46,7 @@
   </xsl:template>
 
   <xsl:template name="vlan-interface-common">
-    <xsl:variable name="iface" select="concat(vlan/interface/@name, '.', vlan/@tag)"/>
+    <xsl:variable name="iface" select="pathcomponent:escape(concat(vlan/interface/@name, '.', vlan/@tag))"/>
 
     <xsl:attribute name="path">/files/etc/sysconfig/network-scripts/ifcfg-<xsl:value-of select="$iface"/></xsl:attribute>
     <node label="DEVICE" value="{$iface}"/>
@@ -138,7 +139,7 @@
        Named templates, following the Relax NG syntax
   -->
   <xsl:template name="name-attr">
-    <xsl:attribute name="path">/files/etc/sysconfig/network-scripts/ifcfg-<xsl:value-of select="@name"/></xsl:attribute>
+    <xsl:attribute name="path">/files/etc/sysconfig/network-scripts/ifcfg-<xsl:value-of select="pathcomponent:escape(@name)"/></xsl:attribute>
     <node label="DEVICE" value="{@name}"/>
   </xsl:template>
 
diff --git a/data/xml/suse-get.xsl b/data/xml/suse-get.xsl
index 182d292..7336616 100644
--- a/data/xml/suse-get.xsl
+++ b/data/xml/suse-get.xsl
@@ -1,6 +1,7 @@
 <?xml version="1.0"?>
 <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                 xmlns:ipcalc = "http://redhat.com/xslt/netcf/ipcalc/1.0"
+                xmlns:pathcomponent = "http://redhat.com/xslt/netcf/pathcomponent/1.0"
                 extension-element-prefixes="ipcalc"
                 version="1.0">
 
@@ -45,7 +46,7 @@
   </xsl:template>
 
   <xsl:template name="vlan-interface-common">
-    <xsl:variable name="iface" select="concat(vlan/interface/@name, '.', vlan/@tag)"/>
+    <xsl:variable name="iface" select="pathcomponent:escape(concat(vlan/interface/@name, '.', vlan/@tag))"/>
 
     <xsl:attribute name="path">/files/etc/sysconfig/network/ifcfg-<xsl:value-of select="$iface"/></xsl:attribute>
     <node label="DEVICE" value="{$iface}"/>
@@ -149,7 +150,7 @@
        Named templates, following the Relax NG syntax
   -->
   <xsl:template name="name-attr">
-    <xsl:attribute name="path">/files/etc/sysconfig/network/ifcfg-<xsl:value-of select="@name"/></xsl:attribute>
+    <xsl:attribute name="path">/files/etc/sysconfig/network/ifcfg-<xsl:value-of select="pathcomponent:escape(@name)"/></xsl:attribute>
     <node label="DEVICE" value="{@name}"/>
   </xsl:template>
 
diff --git a/src/xslt_ext.c b/src/xslt_ext.c
index bf1ec9c..e7f9d9b 100644
--- a/src/xslt_ext.c
+++ b/src/xslt_ext.c
@@ -1,7 +1,7 @@
 /*
  * xslt_ext.c: XSLT extension functions needed by the stylesheets
  *
- * Copyright (C) 2009, 2014 Red Hat Inc.
+ * Copyright (C) 2009, 2014, 2015 Red Hat Inc.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -37,6 +37,8 @@
     (BAD_CAST "http://redhat.com/xslt/netcf/ipcalc/1.0")
 #define XSLT_EXT_BOND_NS                                \
     (BAD_CAST "http://redhat.com/xslt/netcf/bond/1.0")
+#define XSLT_EXT_PATHCOMPONENT_NS                       \
+    (BAD_CAST "http://redhat.com/xslt/netcf/pathcomponent/1.0")
 
 /* Given an IP prefix like "24", compute the netmask "255.255.255.0"
  */
@@ -175,6 +177,43 @@ static void bond_option(xmlXPathParserContextPtr ctxt, int nargs) {
     xmlFree(bond_opts);
 }
 
+
+static void
+pathcomponent_escape(xmlXPathParserContextPtr ctxt, int nargs) {
+    xmlChar *orig_xmlstr = NULL;
+    char *escaped_str = NULL;
+    int r;
+
+    if (nargs != 1) {
+        xmlXPathSetArityError(ctxt);
+        goto error;
+    }
+
+    orig_xmlstr = xmlXPathPopString(ctxt);
+    if (xmlStrlen(orig_xmlstr) == 0) {
+        xmlXPathReturnEmptyString(ctxt);
+        goto error;
+    }
+
+    r = aug_escape_name_base((const char *)orig_xmlstr, &escaped_str);
+    if (r < 0) {
+        xsltTransformError(xsltXPathGetTransformContext(ctxt), NULL, NULL,
+                           "pathcomponent:escape: Out of Memory");
+        goto error;
+    }
+
+    if (escaped_str)
+        xmlXPathReturnString(ctxt, BAD_CAST escaped_str);
+    else
+        xmlXPathReturnString(ctxt, xmlStrdup(orig_xmlstr));
+    escaped_str = NULL;
+ error:
+    xmlFree(orig_xmlstr);
+    free(escaped_str);
+    return;
+}
+
+
 int xslt_register_exts(xsltTransformContextPtr ctxt) {
     int r;
 
@@ -193,6 +232,11 @@ int xslt_register_exts(xsltTransformContextPtr ctxt) {
     if (r < 0)
         return r;
 
+    r = xsltRegisterExtFunction(ctxt, BAD_CAST "escape",
+                                XSLT_EXT_PATHCOMPONENT_NS,
+                                pathcomponent_escape);
+    if (r < 0)
+        return r;
     return 0;
 }
 
-- 
1.7.1

